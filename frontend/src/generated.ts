// Generated by @wagmi/cli@0.1.15 on 29/04/2023 at 10:08:20
import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
} from 'wagmi/actions'

import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EventFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eventFactoryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'organizer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'date', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'ticketPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EventCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_description', internalType: 'string', type: 'string' },
      { name: '_date', internalType: 'uint256', type: 'uint256' },
      { name: '_ticketPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createEvent',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllEvents',
    outputs: [
      {
        name: '',
        internalType: 'struct EventFactory.Event[]',
        type: 'tuple[]',
        components: [
          { name: 'organizer', internalType: 'address', type: 'address' },
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'date', internalType: 'uint256', type: 'uint256' },
          { name: 'ticketPrice', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_id', internalType: 'uint256', type: 'uint256' }],
    name: 'getEvent',
    outputs: [
      {
        name: '',
        internalType: 'struct EventFactory.Event',
        type: 'tuple',
        components: [
          { name: 'organizer', internalType: 'address', type: 'address' },
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'date', internalType: 'uint256', type: 'uint256' },
          { name: 'ticketPrice', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEventIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function getEventFactory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: eventFactoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function readEventFactory<
  TAbi extends readonly unknown[] = typeof eventFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: eventFactoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function writeEventFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof eventFactoryABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof eventFactoryABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: eventFactoryABI, ...config } as WriteContractArgs<
    typeof eventFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function prepareWriteEventFactory<
  TAbi extends readonly unknown[] = typeof eventFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: eventFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function watchEventFactoryEvent<
  TAbi extends readonly unknown[] = typeof eventFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: eventFactoryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function useEventFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: eventFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function useEventFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof eventFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof eventFactoryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: eventFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof eventFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eventFactoryABI}__ and `functionName` set to `"getAllEvents"`.
 */
export function useEventFactoryGetAllEvents<
  TSelectData = ReadContractResult<typeof eventFactoryABI, 'getAllEvents'>,
>(
  config: Omit<
    UseContractReadConfig<typeof eventFactoryABI, 'getAllEvents', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eventFactoryABI,
    functionName: 'getAllEvents',
    ...config,
  } as UseContractReadConfig<
    typeof eventFactoryABI,
    'getAllEvents',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eventFactoryABI}__ and `functionName` set to `"getEvent"`.
 */
export function useEventFactoryGetEvent<
  TSelectData = ReadContractResult<typeof eventFactoryABI, 'getEvent'>,
>(
  config: Omit<
    UseContractReadConfig<typeof eventFactoryABI, 'getEvent', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eventFactoryABI,
    functionName: 'getEvent',
    ...config,
  } as UseContractReadConfig<typeof eventFactoryABI, 'getEvent', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link eventFactoryABI}__ and `functionName` set to `"getEventIds"`.
 */
export function useEventFactoryGetEventIds<
  TSelectData = ReadContractResult<typeof eventFactoryABI, 'getEventIds'>,
>(
  config: Omit<
    UseContractReadConfig<typeof eventFactoryABI, 'getEventIds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: eventFactoryABI,
    functionName: 'getEventIds',
    ...config,
  } as UseContractReadConfig<
    typeof eventFactoryABI,
    'getEventIds',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function useEventFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof eventFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof eventFactoryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof eventFactoryABI, TFunctionName>({
    abi: eventFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link eventFactoryABI}__ and `functionName` set to `"createEvent"`.
 */
export function useEventFactoryCreateEvent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof eventFactoryABI,
          'createEvent'
        >['abi'],
        'createEvent'
      > & { functionName?: 'createEvent' }
    : UseContractWriteConfig<TMode, typeof eventFactoryABI, 'createEvent'> & {
        abi?: never
        functionName?: 'createEvent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof eventFactoryABI, 'createEvent'>({
    abi: eventFactoryABI,
    functionName: 'createEvent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function usePrepareEventFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eventFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eventFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof eventFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link eventFactoryABI}__ and `functionName` set to `"createEvent"`.
 */
export function usePrepareEventFactoryCreateEvent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof eventFactoryABI, 'createEvent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: eventFactoryABI,
    functionName: 'createEvent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof eventFactoryABI, 'createEvent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eventFactoryABI}__.
 */
export function useEventFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof eventFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: eventFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof eventFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eventFactoryABI}__ and `eventName` set to `"EventCreated"`.
 */
export function useEventFactoryEventCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof eventFactoryABI, 'EventCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eventFactoryABI,
    eventName: 'EventCreated',
    ...config,
  } as UseContractEventConfig<typeof eventFactoryABI, 'EventCreated'>)
}
